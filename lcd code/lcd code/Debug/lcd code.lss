
lcd code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bf5  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000503  00000000  00000000  000015cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00001b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006bf  00000000  00000000  00001ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002581  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  64:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z6keypadv>:
#define RW 6
#define RS 5

unsigned char keypad()
{
	PORTC=0b11111110;    //make first row=0
  6c:	8e ef       	ldi	r24, 0xFE	; 254
  6e:	85 bb       	out	0x15, r24	; 21
	if((PINC&(1<<PINC4))==0)
  70:	9c 99       	sbic	0x13, 4	; 19
  72:	08 c0       	rjmp	.+16     	; 0x84 <_Z6keypadv+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	8f e4       	ldi	r24, 0x4F	; 79
  76:	93 ec       	ldi	r25, 0xC3	; 195
  78:	01 97       	sbiw	r24, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <_Z6keypadv+0xc>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_Z6keypadv+0x12>
  7e:	00 00       	nop
	{
		_delay_ms(200);
		return '7';
  80:	87 e3       	ldi	r24, 0x37	; 55
  82:	08 95       	ret
	}
	else if ((PINC&(1<<PINC5))==0)
  84:	9d 99       	sbic	0x13, 5	; 19
  86:	08 c0       	rjmp	.+16     	; 0x98 <_Z6keypadv+0x2c>
  88:	8f e4       	ldi	r24, 0x4F	; 79
  8a:	93 ec       	ldi	r25, 0xC3	; 195
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <_Z6keypadv+0x20>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_Z6keypadv+0x26>
  92:	00 00       	nop
	{
		_delay_ms(200);
		return '8';
  94:	88 e3       	ldi	r24, 0x38	; 56
  96:	08 95       	ret
	}
	else if((PINC&(1<<PINC6))==0)
  98:	9e 99       	sbic	0x13, 6	; 19
  9a:	08 c0       	rjmp	.+16     	; 0xac <_Z6keypadv+0x40>
  9c:	8f e4       	ldi	r24, 0x4F	; 79
  9e:	93 ec       	ldi	r25, 0xC3	; 195
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <_Z6keypadv+0x34>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <_Z6keypadv+0x3a>
  a6:	00 00       	nop
	{
		_delay_ms(200);
		return '9';
  a8:	89 e3       	ldi	r24, 0x39	; 57
  aa:	08 95       	ret
	}
	else if ((PINC&(1<<PINC7))==0)
  ac:	9f 99       	sbic	0x13, 7	; 19
  ae:	08 c0       	rjmp	.+16     	; 0xc0 <_Z6keypadv+0x54>
  b0:	8f e4       	ldi	r24, 0x4F	; 79
  b2:	93 ec       	ldi	r25, 0xC3	; 195
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <_Z6keypadv+0x48>
  b8:	00 c0       	rjmp	.+0      	; 0xba <_Z6keypadv+0x4e>
  ba:	00 00       	nop
	{
		_delay_ms(200);
		return '/';
  bc:	8f e2       	ldi	r24, 0x2F	; 47
  be:	08 95       	ret
	}
	
	PORTC=0b11111101;    // make second row=0
  c0:	8d ef       	ldi	r24, 0xFD	; 253
  c2:	85 bb       	out	0x15, r24	; 21
	if ((PINC&(1<<PINC4))==0)
  c4:	9c 99       	sbic	0x13, 4	; 19
  c6:	08 c0       	rjmp	.+16     	; 0xd8 <_Z6keypadv+0x6c>
  c8:	8f e4       	ldi	r24, 0x4F	; 79
  ca:	93 ec       	ldi	r25, 0xC3	; 195
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <_Z6keypadv+0x60>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_Z6keypadv+0x66>
  d2:	00 00       	nop
	{
		_delay_ms(200);
		return '4';
  d4:	84 e3       	ldi	r24, 0x34	; 52
  d6:	08 95       	ret
	}
	else if ((PINC&(1<<PINC5))==0)
  d8:	9d 99       	sbic	0x13, 5	; 19
  da:	08 c0       	rjmp	.+16     	; 0xec <_Z6keypadv+0x80>
  dc:	8f e4       	ldi	r24, 0x4F	; 79
  de:	93 ec       	ldi	r25, 0xC3	; 195
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <_Z6keypadv+0x74>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_Z6keypadv+0x7a>
  e6:	00 00       	nop
	{
		_delay_ms(200);
		return '5';
  e8:	85 e3       	ldi	r24, 0x35	; 53
  ea:	08 95       	ret
	}
	else if ((PINC&(1<<PINC6))==0)
  ec:	9e 99       	sbic	0x13, 6	; 19
  ee:	08 c0       	rjmp	.+16     	; 0x100 <_Z6keypadv+0x94>
  f0:	8f e4       	ldi	r24, 0x4F	; 79
  f2:	93 ec       	ldi	r25, 0xC3	; 195
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <_Z6keypadv+0x88>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <_Z6keypadv+0x8e>
  fa:	00 00       	nop
	{
		_delay_ms(200);
		return '6';
  fc:	86 e3       	ldi	r24, 0x36	; 54
  fe:	08 95       	ret
	}
	else if ((PINC&(1<<PINC7))==0)
 100:	9f 99       	sbic	0x13, 7	; 19
 102:	08 c0       	rjmp	.+16     	; 0x114 <_Z6keypadv+0xa8>
 104:	8f e4       	ldi	r24, 0x4F	; 79
 106:	93 ec       	ldi	r25, 0xC3	; 195
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <_Z6keypadv+0x9c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_Z6keypadv+0xa2>
 10e:	00 00       	nop
	{
		_delay_ms(200);
		return '*';
 110:	8a e2       	ldi	r24, 0x2A	; 42
 112:	08 95       	ret
	}
	
	PORTC=0b11111011;      //make third row 0
 114:	8b ef       	ldi	r24, 0xFB	; 251
 116:	85 bb       	out	0x15, r24	; 21
	if((PINC&(1<<PINC4))==0)
 118:	9c 99       	sbic	0x13, 4	; 19
 11a:	08 c0       	rjmp	.+16     	; 0x12c <_Z6keypadv+0xc0>
 11c:	8f e4       	ldi	r24, 0x4F	; 79
 11e:	93 ec       	ldi	r25, 0xC3	; 195
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <_Z6keypadv+0xb4>
 124:	00 c0       	rjmp	.+0      	; 0x126 <_Z6keypadv+0xba>
 126:	00 00       	nop
	{
		_delay_ms(200);
		return '1';
 128:	81 e3       	ldi	r24, 0x31	; 49
 12a:	08 95       	ret
	}
	else if((PINC&(1<<PINC5))==0)
 12c:	9d 99       	sbic	0x13, 5	; 19
 12e:	08 c0       	rjmp	.+16     	; 0x140 <_Z6keypadv+0xd4>
 130:	8f e4       	ldi	r24, 0x4F	; 79
 132:	93 ec       	ldi	r25, 0xC3	; 195
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <_Z6keypadv+0xc8>
 138:	00 c0       	rjmp	.+0      	; 0x13a <_Z6keypadv+0xce>
 13a:	00 00       	nop
	{
		_delay_ms(200);
		return '2';
 13c:	82 e3       	ldi	r24, 0x32	; 50
 13e:	08 95       	ret
	}
	else if((PINC&(1<<PINC6))==0)
 140:	9e 99       	sbic	0x13, 6	; 19
 142:	08 c0       	rjmp	.+16     	; 0x154 <_Z6keypadv+0xe8>
 144:	8f e4       	ldi	r24, 0x4F	; 79
 146:	93 ec       	ldi	r25, 0xC3	; 195
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <_Z6keypadv+0xdc>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <_Z6keypadv+0xe2>
 14e:	00 00       	nop
	{
		_delay_ms(200);
		return '3';
 150:	83 e3       	ldi	r24, 0x33	; 51
 152:	08 95       	ret
	}
	else if((PINC&(1<<PINC7))==0)
 154:	9f 99       	sbic	0x13, 7	; 19
 156:	08 c0       	rjmp	.+16     	; 0x168 <_Z6keypadv+0xfc>
 158:	8f e4       	ldi	r24, 0x4F	; 79
 15a:	93 ec       	ldi	r25, 0xC3	; 195
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <_Z6keypadv+0xf0>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_Z6keypadv+0xf6>
 162:	00 00       	nop
	{
		_delay_ms(200);
		return '-';
 164:	8d e2       	ldi	r24, 0x2D	; 45
 166:	08 95       	ret
	}
	
	PORTC=0b11110111;   //make fourth row 0
 168:	87 ef       	ldi	r24, 0xF7	; 247
 16a:	85 bb       	out	0x15, r24	; 21
	if ((PINC&(1<<PIN4))==0)
 16c:	9c 99       	sbic	0x13, 4	; 19
 16e:	08 c0       	rjmp	.+16     	; 0x180 <_Z6keypadv+0x114>
 170:	8f e4       	ldi	r24, 0x4F	; 79
 172:	93 ec       	ldi	r25, 0xC3	; 195
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <_Z6keypadv+0x108>
 178:	00 c0       	rjmp	.+0      	; 0x17a <_Z6keypadv+0x10e>
 17a:	00 00       	nop
	{
		_delay_ms(200);
		return 'c';
 17c:	83 e6       	ldi	r24, 0x63	; 99
 17e:	08 95       	ret
	}
	else if ((PINC&(1<<PINC5))==0)
 180:	9d 99       	sbic	0x13, 5	; 19
 182:	08 c0       	rjmp	.+16     	; 0x194 <_Z6keypadv+0x128>
 184:	8f e4       	ldi	r24, 0x4F	; 79
 186:	93 ec       	ldi	r25, 0xC3	; 195
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <_Z6keypadv+0x11c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <_Z6keypadv+0x122>
 18e:	00 00       	nop
	{
		_delay_ms(200);
		return '0';
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	08 95       	ret
	}
	else if ((PINC&(1<<PINC6))==0)
 194:	9e 99       	sbic	0x13, 6	; 19
 196:	08 c0       	rjmp	.+16     	; 0x1a8 <_Z6keypadv+0x13c>
 198:	8f e4       	ldi	r24, 0x4F	; 79
 19a:	93 ec       	ldi	r25, 0xC3	; 195
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <_Z6keypadv+0x130>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <_Z6keypadv+0x136>
 1a2:	00 00       	nop
	{
		_delay_ms(200);
		return '=';
 1a4:	8d e3       	ldi	r24, 0x3D	; 61
 1a6:	08 95       	ret
	}
	else if ((PINC&(1<<PINC7))==0)
 1a8:	9f 99       	sbic	0x13, 7	; 19
 1aa:	08 c0       	rjmp	.+16     	; 0x1bc <_Z6keypadv+0x150>
 1ac:	8f e4       	ldi	r24, 0x4F	; 79
 1ae:	93 ec       	ldi	r25, 0xC3	; 195
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <_Z6keypadv+0x144>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <_Z6keypadv+0x14a>
 1b6:	00 00       	nop
	{
		_delay_ms(200);
		return '+';
 1b8:	8b e2       	ldi	r24, 0x2B	; 43
 1ba:	08 95       	ret
	}
	return 0;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
}
 1be:	08 95       	ret

000001c0 <_Z6lcdcmdh>:

void lcdcmd(unsigned char cmd)
{
	PORTD &=(1<<RS);  //RS=0 for command
 1c0:	92 b3       	in	r25, 0x12	; 18
 1c2:	90 72       	andi	r25, 0x20	; 32
 1c4:	92 bb       	out	0x12, r25	; 18
	PORTD &=~(1<<RW);  //RW=0 for write
 1c6:	92 b3       	in	r25, 0x12	; 18
 1c8:	9f 7b       	andi	r25, 0xBF	; 191
 1ca:	92 bb       	out	0x12, r25	; 18
	LCD=cmd & 0XF0;  //send upper nibble
 1cc:	98 2f       	mov	r25, r24
 1ce:	90 7f       	andi	r25, 0xF0	; 240
 1d0:	9b bb       	out	0x1b, r25	; 27
	PORTD |=(1<<EN); //EN=1 for H to L pulse
 1d2:	92 b3       	in	r25, 0x12	; 18
 1d4:	90 68       	ori	r25, 0x80	; 128
 1d6:	92 bb       	out	0x12, r25	; 18
 1d8:	e9 ef       	ldi	r30, 0xF9	; 249
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <_Z6lcdcmdh+0x1c>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <_Z6lcdcmdh+0x22>
 1e2:	00 00       	nop
	_delay_ms(1);
	PORTD&=~(1<<EN); //EN=0 for H to L pulse
 1e4:	92 b3       	in	r25, 0x12	; 18
 1e6:	9f 77       	andi	r25, 0x7F	; 127
 1e8:	92 bb       	out	0x12, r25	; 18
	
	LCD=cmd<<4;         //send low nibble
 1ea:	82 95       	swap	r24
 1ec:	80 7f       	andi	r24, 0xF0	; 240
 1ee:	8b bb       	out	0x1b, r24	; 27
	PORTD|=(1<<EN);     //EN =1 for H to l pulse
 1f0:	82 b3       	in	r24, 0x12	; 18
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	82 bb       	out	0x12, r24	; 18
 1f6:	89 ef       	ldi	r24, 0xF9	; 249
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <_Z6lcdcmdh+0x3a>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <_Z6lcdcmdh+0x40>
 200:	00 00       	nop
	_delay_ms(1);
	PORTD&=~(1<<EN);
 202:	82 b3       	in	r24, 0x12	; 18
 204:	8f 77       	andi	r24, 0x7F	; 127
 206:	82 bb       	out	0x12, r24	; 18
 208:	08 95       	ret

0000020a <_Z7lcddatah>:
	
}

void lcddata(unsigned char data)
{
 	PORTD |=(1<<RS);  //RS=1 for data
 20a:	92 b3       	in	r25, 0x12	; 18
 20c:	90 62       	ori	r25, 0x20	; 32
 20e:	92 bb       	out	0x12, r25	; 18
 	PORTD &=~(1<<RW);  //RW=0 for write
 210:	92 b3       	in	r25, 0x12	; 18
 212:	9f 7b       	andi	r25, 0xBF	; 191
 214:	92 bb       	out	0x12, r25	; 18
 	LCD=data & 0XF0;  //send upper nibble
 216:	98 2f       	mov	r25, r24
 218:	90 7f       	andi	r25, 0xF0	; 240
 21a:	9b bb       	out	0x1b, r25	; 27
 	PORTD |=(1<<EN); //EN=1 for H to L pulse
 21c:	92 b3       	in	r25, 0x12	; 18
 21e:	90 68       	ori	r25, 0x80	; 128
 220:	92 bb       	out	0x12, r25	; 18
 222:	e9 ef       	ldi	r30, 0xF9	; 249
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	31 97       	sbiw	r30, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <_Z7lcddatah+0x1c>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <_Z7lcddatah+0x22>
 22c:	00 00       	nop
 	_delay_ms(1);
 	PORTD&=~(1<<EN); //EN=0 for H to L pulse
 22e:	92 b3       	in	r25, 0x12	; 18
 230:	9f 77       	andi	r25, 0x7F	; 127
 232:	92 bb       	out	0x12, r25	; 18
 	
 	LCD=data<<4;         //send low nibble
 234:	82 95       	swap	r24
 236:	80 7f       	andi	r24, 0xF0	; 240
 238:	8b bb       	out	0x1b, r24	; 27
 	PORTD|=(1<<EN);     //EN =1 for H to l pulse
 23a:	82 b3       	in	r24, 0x12	; 18
 23c:	80 68       	ori	r24, 0x80	; 128
 23e:	82 bb       	out	0x12, r24	; 18
 240:	89 ef       	ldi	r24, 0xF9	; 249
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <_Z7lcddatah+0x3a>
 248:	00 c0       	rjmp	.+0      	; 0x24a <_Z7lcddatah+0x40>
 24a:	00 00       	nop
 	_delay_ms(1);
 	PORTD&=~(1<<EN);
 24c:	82 b3       	in	r24, 0x12	; 18
 24e:	8f 77       	andi	r24, 0x7F	; 127
 250:	82 bb       	out	0x12, r24	; 18
 252:	08 95       	ret

00000254 <_Z8lcd_initv>:
}


void lcd_init()
{
	DDRA=0xFF;    //Define output of lcd port
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	8a bb       	out	0x1a, r24	; 26
	DDRD=0XFF;     //define RS,EN and RW pin as out put
 258:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<EN);    //Initialize en=0
 25a:	82 b3       	in	r24, 0x12	; 18
 25c:	8f 77       	andi	r24, 0x7F	; 127
 25e:	82 bb       	out	0x12, r24	; 18
	lcdcmd(0x33);
 260:	83 e3       	ldi	r24, 0x33	; 51
 262:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z6lcdcmdh>
	lcdcmd(0x32);
 266:	82 e3       	ldi	r24, 0x32	; 50
 268:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z6lcdcmdh>
	lcdcmd(0x28);       //LCD 4 bit mode 
 26c:	88 e2       	ldi	r24, 0x28	; 40
 26e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z6lcdcmdh>
	lcdcmd(0x0E);      //display on cursor  on
 272:	8e e0       	ldi	r24, 0x0E	; 14
 274:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z6lcdcmdh>
	lcdcmd(0x01);       //clear lcd
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z6lcdcmdh>
 27e:	83 ef       	ldi	r24, 0xF3	; 243
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <_Z8lcd_initv+0x2e>
 286:	00 c0       	rjmp	.+0      	; 0x288 <_Z8lcd_initv+0x34>
 288:	00 00       	nop
 28a:	08 95       	ret

0000028c <main>:


int main(void)
{
	unsigned char X;
	DDRC=0x0F;  // make PCO to PC3 =O/P and PC4 to PC7 =I/P
 28c:	8f e0       	ldi	r24, 0x0F	; 15
 28e:	84 bb       	out	0x14, r24	; 20
 290:	89 ef       	ldi	r24, 0xF9	; 249
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <main+0x8>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0xe>
 29a:	00 00       	nop
	_delay_ms(1);
	PORTC=0xF0;
 29c:	80 ef       	ldi	r24, 0xF0	; 240
 29e:	85 bb       	out	0x15, r24	; 21
	lcd_init();
 2a0:	0e 94 2a 01 	call	0x254	; 0x254 <_Z8lcd_initv>
	
    while (1) 
    {
		PORTC=0XF0;   //make all 4 column and all 4 rows 0
 2a4:	80 ef       	ldi	r24, 0xF0	; 240
 2a6:	85 bb       	out	0x15, r24	; 21
 2a8:	89 e6       	ldi	r24, 0x69	; 105
 2aa:	98 e1       	ldi	r25, 0x18	; 24
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0x20>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x26>
 2b2:	00 00       	nop
		_delay_ms(25);
		if(PINC!=0XF0)
 2b4:	83 b3       	in	r24, 0x13	; 19
 2b6:	80 3f       	cpi	r24, 0xF0	; 240
 2b8:	a9 f3       	breq	.-22     	; 0x2a4 <main+0x18>
		{
			X=keypad();
 2ba:	0e 94 36 00 	call	0x6c	; 0x6c <_Z6keypadv>
		    lcddata(X);
 2be:	0e 94 05 01 	call	0x20a	; 0x20a <_Z7lcddatah>
 2c2:	f0 cf       	rjmp	.-32     	; 0x2a4 <main+0x18>

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
